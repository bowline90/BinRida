{
   "pluginmetadataversion": 2,
   "name": "BinRida",
   "author": "Andrea Ferraris",
   "type": [
      "helper"
   ],
   "api": [
      "python2", "python3"
   ],
   "description": " This plugin allows to stalk, dump and instrument a process using Frida functionalities.",
   "longdescription": "This plugin enables a Binary Ninja user to use Frida features to speed up the reverse engineering.\n\n To install this plugin, navigate to your Binary Ninja plugins directory, and run\n ```\n git clone https://github.com/bowline90/BinRida.git\n```\n\n ## Usage:\n\nThis plugin will add three new commands in the Binary Ninja GUI:\n * `BINRIDA: Dump context of this function`: this command allows to dump various information about the runtime environment. It hooks the selected function and dump the following information:\n * `Depth`: this value is the recursion of the function;\n * `Callee function`: the callee function and the relative module;\n * `Register`: Value of the register entering (and before leaving) the function;\n * `Memory Mappings`: The virtual memory map of the process;\n * `Module Mapping`: The list of module mapped (with the address).\n * `BINRIDA: Instrument this address`: this command allows to instrument one specific address. We can write our custom code inside `frida script` form. Consider that this code will be executed inside an `Interceptor.attach(p, {` statment.\nFor example, we can write:\n```\n onEnter: function(args) { send('Entering...');},\n onLeave: function(args) { send('Leaving...');}\n```\n You can use write and use the Javascript Frida API \n `BINRIDA: Stalk program execution`: this command allows to _stalk_ the program execution. It highlights the basic block executed, you can execute this command many time with different colors to track the different executed path.\n\n## Frida settings:\n Each command will prompt a form for define various settings. There is a _common_ area that specify how connect to process.\n `Device`: setting the frida device (`local`, `tcp`, ecc.) \n `Application`: this is the program that Frida will spawn. The default application is the same opened in Binary Ninja but it is possible to specify another application (for example if you are reversing a shared library). The address are automatic rebased in the new process map. \n * `Command line`: the command line arguments passed (default no one). \n * `Execution mode`: spawn a new process or attach to an exist one \n * `PID`: in _attach_ mode, this is the PID of the process \n\n In the _stalk program exection_ command you should also set the function to intercept and start the stalking. \n\n If you want to communicate with the program you can use `frida-server` and set `TCP` as device.\n\n## Dependencies: \n - `psutil` \n - `frida`\n",

    "license": {
      "name": "MIT",
      "text": "Copyright 2019 Andrea Ferraris\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
   },
   "platforms": [
      "Linux"
   ],
   "installinstructions": {
      "Linux": "`pip install psutil frida`"
   },
   "version": "0.9",
   "minimumbinaryninjaversion": 1689
}
